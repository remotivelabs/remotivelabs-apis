{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Remotive Topology 0.5",
  "oneOf": [
    { "$ref": "#/definitions/platform_schema" },
    { "$ref": "#/definitions/instance_schema" }
  ],
  "definitions": {
    "platform_schema": {
      "type": "object",
      "additionalProperties": false,
      "description": "The platform describes which ECUs and services that exist and how they communicate, see [docs](https://docs.remotivelabs.com/docs/remotive-topology/usage/platform)",
      "properties": {
        "schema": { "type": "string", "enum": ["remotive-topology-platform:0.4", "remotive-topology-platform:0.5"] },
        "includes": {
          "type": "array",
          "description": "Platform files to include (.platform.yaml or .arxml)",
          "items": { "type": "string" }
        },
        "channels": {
          "type": "object",
          "description": "Defines the channels that are available in the platform. This is a map of channel names to channel definitions.",
          "additionalProperties": {
            "$ref": "#/definitions/platform_channel"
          }
        },
        "ecus": {
          "type": "object",
          "description": "Defines the ECUs that are available in the platform. This is a map of ecu names to ECU definitions.",
          "additionalProperties": {
            "$ref": "#/definitions/platform_ecu"
          }
        }
      }
    },
    "instance_schema": {
      "type": "object",
      "additionalProperties": false,
      "description": "In order to run a topology you need create an instance that describes what parts of the platform you want to run in your virtual environment, see [docs](https://docs.remotivelabs.com/docs/remotive-topology/usage/instance)",
      "properties": {
        "schema": { "type": "string", "enum": ["remotive-topology-instance:0.5"] },
        "name": { "type": "string", "description": "Optional name of the topology instance" },
        "includes": {
          "type": "array",
          "description": "Instance files to include (.instance.yaml)",
          "items": { "type": "string" }
        },
        "containers": {
          "type": "object",
          "description": "Custom containers that are part of the topology and have access to RemotiveBroker and can therefore interact with ECUs in the topology. A common usecase is to run testcase.",
          "additionalProperties": {
            "$ref": "#/definitions/container"
          }
        },
        "channels": {
          "type": "object",
          "description": "Which channels to instantiate and how. This is a map of channel names to channel instantiations.",
          "additionalProperties": {
            "$ref": "#/definitions/instance_channel"
          }
        },
        "ecus": {
          "type": "object",
          "description": "Which ECUs to instantiate and how. This is a map of ECU names to ECU instantiations.",
          "additionalProperties": {
            "$ref": "#/definitions/instance_ecu"
          }
        },
        "platform": {
          "description": "The platform that this instance is based on.",
          "$ref": "#/definitions/platform_schema"
        },
        "settings": {
          "description": "Global settings for the instance",
          "$ref": "#/definitions/settings"
        }
      }
    },
    "platform_channel": {
      "type": "object",
      "properties": {
        "type": { "enum": ["ethernet", "can", "lin"] },
        "database": { "type": "string", "description": "Signal database for this channel" }
      },
      "required": ["type"],
      "oneOf": [
        { "$ref": "#/definitions/platform_channel_ethernet" },
        { "$ref": "#/definitions/platform_channel_can" },
        { "$ref": "#/definitions/platform_channel_lin" }
      ]
    },
    "platform_channel_can": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "can" },
        "baudrate": { "type": "integer" },
        "database": { "type": "string", "description": "Signal database for this channel" },
        "can_cluster": { "type": "string" },
        "can_physical_channel_name": { "type": "string" }
      }
    },
    "platform_channel_lin": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "lin" },
        "database": { "type": "string", "description": "Signal database for this channel" }
      }
    },
    "platform_channel_ethernet": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "ethernet" },
        "database": { "type": "string", "description": "Signal database for this channel" },
        "someip": {
          "$ref": "#/definitions/someip"
        },
        "vlan": { "type": "integer" },
        "cluster_name": { "type": "string" },
        "subnet": { "type": "string" },
        "endpoints": {
          "type": "object",
          "description": "All available application endpoints",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "static_socket_connections": {
                "type": "object",
                "description": "Ethernet PDU connections to other endpoints",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "target_host": { "type": "string" },
                    "target_port": { "type": "integer" }
                  }
                }
              },
              "provided_service_instances": {
                "type": "array",
                "description": "SOME/IP service instances provided at this endpoint",
                "items": {
                  "type": "string"
                }
              },
              "consumed_service_instances": {
                "type": "array",
                "description": "SOME/IP service instances consumed from this endpoint",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "someip": {
      "type": "object",
      "description": "Defines which SOME/IP service instances are available. This is a map of service instance names to service instance definitions.",
      "additionalProperties": false,
      "properties": {
        "services": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/someip_service_instance"
          }
        }
      }
    },
    "someip_service_instance": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "service_id": { "type": "integer" },
        "instance_id": { "type": "integer" },
        "version_major": { "type": "integer" }
      }
    },
    "platform_ecu": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "database": { "type": "string", "description": "ECU extract signal database. Overrides signal database from channel" },
        "alias_for" : { "type": "string", "description": "Use this to combine ECUs with different names into a single ECU" },
        "channels": {
          "type": "object",
          "description": "Describes which channels the ECU is connected to and details about those connections. This is a map of channel names to channel definitions.",
          "additionalProperties": {
            "oneOf": [
              { "$ref": "#/definitions/platform_ecu_channel" },
              { "type": "null" }
            ]
          }
        }
      }
    },
    "platform_ecu_channel": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "database": { "type": "string" },
        "config": { 
          "type": "object",
          "properties": {
            "type": { "enum": ["ethernet", "can", "lin"] }
          },
          "required": ["type"],
          "oneOf": [
            { "$ref": "#/definitions/platform_ecu_channel_config_can" },
            { "$ref": "#/definitions/platform_ecu_channel_config_ethernet" },
            { "$ref": "#/definitions/platform_ecu_channel_config_lin" }
          ]
        }
      }
    },
    "platform_ecu_channel_config_can": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "can" }
      }
    },
    "platform_ecu_channel_config_lin": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "lin" },
        "master": { "type": "boolean" }
      }
    },
    "platform_ecu_channel_config_ethernet": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "ethernet" },
        "host": { "type": "string", "description": "IP address for the ECU" }
      }
    },
    "settings": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "docker": {
          "$ref": "#/definitions/settings_docker"
        },
        "remotivebroker": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "license_file": { "type": "string", "description": "Optional path to the LICENSE_FILE" },
            "version": { "type": "string", "description": "RemotiveBroker version" }
          }
        },
        "ui": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "port": { "type": "integer", "description": "Port number forwarded from host to UI" },
            "profile": { "type": "string", "description": "Docker profile to use for the UI" }
          }
        },
        "can": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "default_driver": { "enum": ["udp", "dockercan"] }
          }
        },
        "topology_broker": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "channels": {
              "type": "object",
              "description": "Channels configuration for the TopologyBroker to override defaults. This is a map of channel names to channel definitions.",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "database": { "type": "string", "description": "Optional signal database to use for the TopologyBroker. Make sure it includes all frames." }
                }
              }
            }
          }
        }
      }
    },
    "instance_ecu": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "container": { "$ref": "#/definitions/container" },
        "channels": {
          "type": "object",
          "description": "Describes which channels should be instantiated for the ECU and details about those connections. By default all channels are instantiated. This is a map of channel names to channel definitions.",
          "additionalProperties": {
            "oneOf": [
              { "$ref": "#/definitions/instance_ecu_channel" },
              { "type": "null", "description": "Use null to indicate that the channel should be instantiated without any specific configuration." }
            ]
          }
        },
        "mock": {
          "type": "object",
          "description": "Optional mock used to automatically send and receive messages",
          "additionalProperties": false,
          "properties": {
            "channels": {
              "type": "object",
              "description": "Channels that should be included in the mock. By default all channels are included. This is a map of channel names to null. This allows the mock defintion to be very similar to a model defintion.",
              "additionalProperties": {
                "oneOf": [
                  { "type": "null" }
                ]
              }
            }
          }
        },
        "models": {
          "type": "object",
          "description": "Models that implement ECU behavior. This is a map of model names to model definitions.",
          "additionalProperties": {
            "oneOf": [
              { "$ref": "#/definitions/container_behavioral_model" },
              { "$ref": "#/definitions/python_behavioral_model" }
            ]
          }
        }
      }
    },
    "container": {
      "additionalProperties": false,
      "properties": {
        "profiles": { "type": "array", "description": "Docker profiles", "items": { "type": "string" } },
        "dockerfile": { "type": "string", "description": "Path to dockerfile" },
        "image": { "type": "string", "description": "Docker image to use" },
        "working_dir": { "type": "string", "description": "Working directory inside container" },
        "command": { "type": "string", "description": "Command to execute in container" },
        "platform": { "type": "string", "description": "Force a specific platform, eg linux/amd64" },
        "target": { "type": "string", "description": "Target stage in multi-stage Dockerfile (only used with dockerfile)" },
        "control_network": { "type": "boolean", "description": "Whether to include the control network in the container configuration, defaults to true" },
        "ports": {
          "type": "array",
          "description": "List of port mappings",
          "items": { "type": "string" }
        },
        "args": {
          "type": "array",
          "description": "Optional build arguments for docker container",
          "items": { "type": "string" }
        },
        "environment": {
          "type": "array",
          "description": "Environment variables",
          "items": { "type": "string" }
        },
        "depends_on": {
          "type": "array",
          "description": "List of containers that this container depends on",
          "items": { "type": "string" }
        },
        "volumes": {
          "type": "array",
          "description": "Volume mappings using short syntax, see https://docs.docker.com/reference/compose-file/services/#short-syntax-5",
          "items": { "type": "string" }
        },
        "cap_add": {
          "type": "array",
          "description": "Add container capabilities",
          "items": { "type": "string" }
        },
        "devices": {
          "type": "array",
          "description": "Devices to be mapped to the container",
          "items": { "type": "string" }
        }
      }
    },
    "instance_ecu_channel": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "config": { 
          "type": "object",
          "description": "Optionally restrict what channels the instantiated ECU should be connected to",
          "properties": {
            "type": { "enum": ["ethernet", "can"] }
          },
          "required": ["type"],
          "oneOf": [
            { "$ref": "#/definitions/instance_ecu_channel_config_can" },
            { "$ref": "#/definitions/instance_ecu_channel_config_ethernet" }
          ]
        }
      }
    },
    "instance_ecu_channel_config_can": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "can" }
      }
    },
    "instance_ecu_channel_config_ethernet": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "ethernet" },
        "someip": { "$ref": "#/definitions/someip_channel" },
        "static_socket_connections": {
          "type": "array",
          "description": "Optionally specify what static socket connections to instantiate",
          "items": { "type": "string" }
        }
      }
    },
    "someip_channel": {
      "type": "object",
      "additionalProperties": false,
      "description": "Optionally limit what SOME/IP services should be instantiated",
      "properties": {
        "provided_service_instances": {
          "type": "array",
          "description": "Optionally limit what provided SOME/IP services should be instantiated",
          "items": { "type": "string" }
        },
        "consumed_service_instances": {
          "type": "array",
          "description": "Optionally limit what SOME/IP services should be consumed",
          "items": { "type": "string" }
        }
      }
    },
    "settings_docker": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "mock": { "$ref": "#/definitions/container" },
        "python": { "$ref": "#/definitions/container" }
      }
    },
    "instance_channel": {
      "type": "object",
      "properties": {
        "type": { "enum": ["ethernet", "can", "lin"] }
      },
      "required": ["type"],
      "oneOf": [
        { "$ref": "#/definitions/instance_channel_ethernet" },
        { "$ref": "#/definitions/instance_channel_lin" },
        { "$ref": "#/definitions/instance_channel_can" }
      ]
    },
    "instance_channel_ethernet": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "ethernet" },
        "driver": { "$ref": "#/definitions/instance_channel_driver_ethernet" },
        "gateway_ip": { "type": "string" },
        "topology_broker_ip": { "type": "string" }
      }
    },
    "instance_channel_driver_can_over_udp": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "udp", "description": "Emulate CAN using UDP" },
        "port": { "type": "integer", "description": "Optional port number to use" },
        "subnet": { "type": "string", "description": "Optional subnet to use" },
        "target_host": { "type": "string", "description": "Optional multicast address to use" }
      },
      "required": ["type"]
    },
    "instance_channel_driver_docker_can": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "dockercan", "description": "Use socketcan with RemotiveLabs dockercan driver" },
        "device_name": { "type": "string", "pattern": "^[a-z0-9-]{1,14}$", "description": "Physical hardware device name on the host" },
        "peer": { "type": "string", "pattern": "^[a-z0-9-]{1,13}$", "description": "Optional name of the device inside the docker container" }
      },
      "required": ["type", "device_name"]
    },
    "instance_channel_can_driver": {
      "type": "object",
      "properties": {
        "type": { "enum": ["dockercan", "udp"] }
      },
      "required": ["type"],
      "oneOf": [
        { "$ref": "#/definitions/instance_channel_driver_docker_can" },
        { "$ref": "#/definitions/instance_channel_driver_can_over_udp" }
      ]
    },
    "instance_channel_can": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "can" },
        "driver": { "$ref": "#/definitions/instance_channel_can_driver" }
      }
    },
    "instance_channel_lin_config_remotivelabs": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "remotivelabs_lin", "description": "Use RemotiveLabs lin protocol" },
        "device_identifier": { "type": "integer", "description": "Lin device identifier" },
        "server_port": { "type": "integer", "description": "Server port used by host" },
        "target_host": { "type": "string", "description": "Lin device IP number" },
        "target_port": { "type": "integer", "description": "Lin device port number" },
        "auto_config_boot_server": { "type": "integer", "description": "Config server port number, must be the same for all LIN channels on the same ECU" }
      },
      "required": ["type"]
    },
    "instance_channel_lin_config": {
      "type": "object",
      "properties": {
        "type": { "enum": ["remotivelabs_lin"] }
      },
      "required": ["type"],
      "oneOf": [
        { "$ref": "#/definitions/instance_channel_lin_config_remotivelabs" }
      ]
    },
    "instance_channel_lin": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "lin" },
        "schedule_autostart": { "type": "boolean" },
        "schedule_table_name": { "type": "string" },
        "config": { "$ref": "#/definitions/instance_channel_lin_config" }
      }
    },
    "instance_channel_driver_ethernet": {
      "type": "object",
      "properties": {
        "type": { "enum": ["macvlan", "ipvlan", "bridge", "external"] }
      },
      "required": ["type"],
      "oneOf": [
        { "$ref": "#/definitions/instance_channel_driver_macvlan" },
        { "$ref": "#/definitions/instance_channel_driver_ipvlan" },
        { "$ref": "#/definitions/instance_channel_driver_bridge" },
        { "$ref": "#/definitions/instance_channel_driver_external" }
      ]
    },
    "instance_channel_driver_macvlan": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "macvlan", "description": "Use macvlan to connect physical ethernet device" },
        "device_name": { "type": "string", "description": "Physical device name on the host" }
      },
      "required": ["type", "device_name"]
    },
    "instance_channel_driver_ipvlan": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "ipvlan", "description": "Use ipvlan to connect physical ethernet device" },
        "device_name": { "type": "string", "description": "Physical device name on the host" }
      },
      "required": ["type", "device_name"]
    },
    "instance_channel_driver_bridge": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "bridge", "description": "Docker bridge network is the default" },
        "name": { "type": "string", "description": "Optional name of the linux network bridge" }
      },
      "required": ["type"]
    },
    "instance_channel_driver_external": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "const": "external" , "description": "Use an existing docker network"},
        "name": { "type": "string", "description": "Name of an already existing docker network" }
      },
      "required": ["type"]
    },
    "python_behavioral_model": {
      "type": "object",
      "additionalProperties": false,
      "description": "[Deprecated] Python behavioral model, use container instead.",
      "properties": {
        "type": { "const": "python" },
        "container": { "$ref": "#/definitions/container" },
        "main": { "type": "string", "description": "Main python module to run" },
        "include": { "type": "string", "description": "Files to be included in the container, must include your python code as module" }
      },
      "required": ["type", "main"]
    },
    "container_behavioral_model": {
      "type": "object",
      "additionalProperties": false,
      "description": "Behavioral model using a container. This is the preferred way to define a model.",
      "properties": {
        "type": { "const": "container" },
        "container": { "$ref": "#/definitions/container" }
      },
      "required": ["type", "container"]
    }
  },
  "required": ["schema"]
}
